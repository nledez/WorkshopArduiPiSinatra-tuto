Configuration du RaspberryPi pour l'utilisation du framework Sinatra
====================================================================
Romuald ROUSSEAU <romuald.rousseau.35@free.fr>
:toc:
:icons:
:numbered:

Les pré-requis
--------------

Les pré-requis sont plutôt minimaliste puisqu'il suffit
d'avoir un RaspberryPi fonctionnel et de connaitre son adresse IP pour
s'y connecter en SSH. Dans ce tutoriel c'est la distribution Raspbian
qui est installée.

Préparer son répertoire de travail
----------------------------------

Tout d'abord connecté vous à votre Raspberry Pi à l'aide de Putty par
exemple.

Créer un répertoire de travail

`mkdir WorkShopArduiPiSinatra`

Aller dans le répertoire de travail

`cd WorkShopArduiPiSinatra`

Installation / controle des logiciels nécessaires.
--------------------------------------------------

ruby et gem devraient déjà être installés mais nous allons quand même le
vérifier

ruby
~~~~

`ruby –-version`

Image:

Ici on voit que la version 1.9.3.p194 de ruby est installée

gem
~~~

On va vérifier ensuite que gem soit bien installé avec la commande

`gem –-version`

Image:

Cette fois c'est la version 1.8.23 de gem qui est installée

sinatra
~~~~~~~

Maintenant, nous allons pouvoir installer le framework sinatra, pour
cela on éxécute la commande

`sudo gem install sinatra`

Image:

_Vous devez être connecté à internet pour cette étape car le framework
sinatra sera téléchargé._

Nous allons devoir fixer la version des gems nécessaires (bundle va s'en
occuper pour nous)

bundle
~~~~~~

Verification que bundle soit bien installé.

`bundle --version`

Image:

Le retour commande introuvable nous indique que bundle n'est pas
installé, nous allons donc l'installer avec la commande.

`sudo apt-get install bundler`

_il y'a bien un 'r' à la fin, ce n'est pas une faute de frappe_

Image:

Vérification que l'installation ce soit bien déroulée en rééxécutant la
commande

`bundle --version`

Image:

Cette fois-ci, un numéro de version nous est affichée, nous avons donc
bien bundle d'installé.

Controle du contenu du dossier en cours avec la commande.

`ls -alh`

Image:

Nous voyons que notre dossier est vide (ce qui est logique vu que nous
n'avons encore rien fait)

Création d'un fichier 'gabarit' Gemfile (spécifie les versions de gems
utilisées).

`bundle init`

Image:

Regardons à nouveau le contenu de notre dossier.

Image:

On voit qu'un fichier Gemfile à été créé.

Allons voir ce qu'il contient en éxécutant la commande suivante.

`sudo nano Gemfile`

Image:

Nous remarquons que ce fichier est vide (enfin presque), car il contient
tout de même un exemple. Nous allons lui spécifier de gérer les
dépendances pour le framework sinatra. En ajoutant la ligne suivante.

`gem ‘sinatra’`

Image:

_Entregistrons les modifications faite dans le fichier en appuyant sur
les touches Ctrl + x, puis o pour dire 'oui on enregistre les
modifications' et enfin entrée pour valider le nom du fichier (ici on
garde le même)._

Maintenant, exécutons la commande suivante afin de créer le fichier qui
va enregistrer les numéros de version actuelles.

`bundle install`

Image:

Retournons voir le contenu de notre répertoire, on remarque que le
fichier Gemfile.lock a été créé.

Image:

Allons voir ce que contient le fichier Gemfile.lock par la commande

`nano Gemfile.lock`

Image:

Le fichier Gemfile.lock recense bien toutes les Gems (et surtout leurs
versions) nécessairent.

Notre première page en ruby
---------------------------

Création de notre page
~~~~~~~~~~~~~~~~~~~~~~

Maintenant essayons d'afficher quelquechose avec notre serveur
d'application, pour cela rendez-vous sur la page du framework sinatra
(http://www.sinatrarb.com/[http://www.sinatrarb.com]) pour voir ce qui
est indiqué.

Image:

Il nous est donc demandé dans un premier temps de créer un fichier que
nous appelerons 'hi.rb'

Nous pouvons créer ce fichier avec la commande ( comme 'hb.rb' n'éxiste
pas nano le créera en même temps).

`sudo nano hi.rb`

Image:

Et saisir le contenu suivant à l'intérieur

`require 'sinatra'`

`get '/hi' do` +
`    “Hello World!”` +
`end `

De la même façon que tout à l'heure nous quittons avec la combinaison de
tout (CTRL + x), il nous demande si on veut enregistrer, on spécifie oui
en appuyant sur la touche 'o', puis il nous demande le nom de fichier.
Par défaut il mettra celui que l'on a spécifié lors de l'appel à nano.
Comme le fichier n'éxiste pas il le créera automatiquement pour nous.

Lancement du serveur d'application.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Comme indiqué sur la page de 'sinatra' exécutons notre fichier par la
commande.

`ruby hi.rb`

_Nous n'avons pas besoin de l'installer étant donné que nous l'avons
fait au préalable_

Image:

On remarque une erreur à la création de l'adresse (de plus notre page
est inaccessible).

Tentons d'éxécuter le fichier en mode production avec l'instruction.

`ruby hi.rb -e production`

Image:

Image:

Cette fois ci, il n'y a pas d'erreur.

Et on remarque, que le port ou communique le serveur d'application nous
est fourni (encadré en rouge).

L'affichage de notre page.
~~~~~~~~~~~~~~~~~~~~~~~~~~

Tentons donc de nous connecter à cette page en entrant l'url suivante
dans notre navigateur.

`192.0.168.16:4567`

_192.168.0.16 est l'IP de mon RaspberryPi il faudra bien évidement
remplacer cette IP par celle de votre RaspberryPi._

Image:

Arf, ça marche pas. Regardons notre fichier hi.rb de plus près. On
remarque qu'on lui a spécifié une route ('/hi'). Or là, nous nous
connectons à la racine. Tentons d'accéder à cette route que nous avons
spécifiée.

En entrant cette fois l'url suivante.

`192.0.168.16:4567/hi`

Image:

Cette fois notre serveur fonctionne parfaitement et notre page est
correctement appelée :).

Les sites utiles :

Ruby : https://www.ruby-lang.org/fr/[https://www.ruby-lang.org/fr/]

Gems Ruby : https://rubygems.org/[https://rubygems.org/]

Framework Sinatra : http://www.sinatrarb.com/[http://www.sinatrarb.com]

Gestionnaire de gems Bundler : http://bundler.io/[http://bundler.io/]
